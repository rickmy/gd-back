// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @default(autoincrement())
  userId         String          @id @default(uuid())
  dni            String          @unique
  name           String
  secondName     String?
  lastName       String
  secondLastName String?
  completeName   String
  email          String          @unique
  password       String
  salt           String
  phone          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  state          Boolean         @default(true)
  rolId          String
  rol            Rol             @relation(fields: [rolId], references: [rolId])
  documents      Document[]
  userHasCareer  UserHasCareer[]

  @@index([dni, email])
}

model Rol {
  id               Int                @default(autoincrement())
  rolId            String             @id @default(uuid())
  code             String?            @unique
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  state            Boolean            @default(true)
  users            User[]
  rolHasPermission RolHasPermission[]
}

model Permission {
  id               Int                @default(autoincrement())
  permissionId     String             @id @default(uuid())
  actionId         String
  action           Action             @relation(fields: [actionId], references: [actionId])
  resourceId       String
  resource         Resource           @relation(fields: [resourceId], references: [resourceId])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  state            Boolean            @default(true)
  rolHasPermission RolHasPermission[]
}

model Action {
  id         Int          @default(autoincrement())
  actionId   String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  state      Boolean      @default(true)
  Permission Permission[]
}

model Resource {
  id         Int          @default(autoincrement())
  resourceId String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  state      Boolean      @default(true)
  permission Permission[]
}

model RolHasPermission {
  rolId        String
  permissionId String
  rol          Rol        @relation(fields: [rolId], references: [rolId])
  permission   Permission @relation(fields: [permissionId], references: [permissionId])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  state        Boolean    @default(true)

  @@id([rolId, permissionId])
}

model Career {
  id               Int             @default(autoincrement())
  careerId         String          @id @default(uuid())
  code             String          @unique
  codeAuth         String          @unique
  resolutionNumber String          @unique
  name             String
  titleAwarded     String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  state            Boolean         @default(true)
  instituteId      String
  institute        Institute       @relation(fields: [instituteId], references: [instituteId])
  modalityId       String
  modality         Modality        @relation(fields: [modalityId], references: [modalityId])
  typeCareerId     String
  typeCareer       TypeCareer      @relation(fields: [typeCareerId], references: [typeCareerId])
  userHasCareer    UserHasCareer[]
}

model UserHasCareer {
  userId    String
  careerId  String
  user      User     @relation(fields: [userId], references: [userId])
  career    Career   @relation(fields: [careerId], references: [careerId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     Boolean  @default(true)

  @@id([userId, careerId])
}

model Institute {
  id          Int      @default(autoincrement())
  instituteId String   @id @default(uuid())
  code        String   @unique
  codeAuth    String   @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  state       Boolean  @default(true)
  careers     Career[]
}

model Modality {
  id         Int      @default(autoincrement())
  modalityId String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  state      Boolean  @default(true)
  careers    Career[]
}

model TypeCareer {
  id           Int      @default(autoincrement())
  typeCareerId String   @id @default(uuid())
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  state        Boolean  @default(true)
  careers      Career[]
}

model Document {
  id         Int      @default(autoincrement())
  documentId String   @id @default(uuid())
  code       String   @unique
  path       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  state      Boolean  @default(true)
  templateId String
  template   Template @relation(fields: [templateId], references: [templateId])
  typeDocId  String
  typeDoc    TypeDoc  @relation(fields: [typeDocId], references: [typeDocId])
  userId     String
  user       User     @relation(fields: [userId], references: [userId])
}

model Template {
  id                Int                 @default(autoincrement())
  templateId        String              @id @default(uuid())
  name              String
  components        Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  state             Boolean             @default(true)
  typeDocId         String
  typeDoc           TypeDoc             @relation(fields: [typeDocId], references: [typeDocId])
  Document          Document[]
  DocumentComponent DocumentComponent[]
}

model DocumentComponent {
  id                  Int      @default(autoincrement())
  documentComponentId String   @id @default(uuid())
  name                String   @unique
  position            Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  state               Boolean  @default(true)
  templateId          String
  template            Template @relation(fields: [templateId], references: [templateId])
}

model TypeDoc {
  id        Int        @default(autoincrement())
  typeDocId String     @id @default(uuid())
  name      String
  header    String?
  content   String?
  footer    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  state     Boolean    @default(true)
  documents Document[]
  Template  Template[]
}
