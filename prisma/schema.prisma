// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @default(autoincrement())
  dni            String         @id @unique
  typeDni        TypeDNI        @default(CEDULA)
  userName       String         @unique
  firstName      String
  secondName     String?
  lastName       String
  secondLastName String?
  email          String         @unique
  password       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  state          Boolean        @default(true)
  idRol          Int            @default(1)
  rol            Rol            @relation(fields: [idRol], references: [id])
  student        Student?
  company        Company?
  academicTutor  AcademicTutor?
  businessTutor  BusinessTutor?
}

model Rol {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  state            Boolean            @default(true)
  users            User[]
  rolHasPermission RolHasPermission[]
}

model Permission {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  endpoint         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  state            Boolean            @default(true)
  rolHasPermission RolHasPermission[]
}

model RolHasPermission {
  idRol        Int
  idPermission Int
  rol          Rol        @relation(fields: [idRol], references: [id])
  permission   Permission @relation(fields: [idPermission], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  state        Boolean    @default(true)

  @@id([idRol, idPermission])
}

model AcademicTutor {
  id        Int      @default(autoincrement())
  idUser    String   @id @unique
  user      User     @relation(fields: [idUser], references: [dni])
  idCareer  Int
  career    Career   @relation(fields: [idCareer], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     Boolean  @default(true)
}

model BusinessTutor {
  id        Int      @default(autoincrement())
  idUser    String   @id @unique
  user      User     @relation(fields: [idUser], references: [dni])
  idCompany Int
  company   Company  @relation(fields: [idCompany], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     Boolean  @default(true)
}

model Company {
  id                       Int                        @id @default(autoincrement())
  ruc                      String                     @unique
  name                     String                     @unique
  dniRepresentLegal        String                     @unique
  nameRepresentLegal       String
  lastNameRepresentLegal   String
  phone                    String
  address                  String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  state                    Boolean                    @default(true)
  status                   StatusCompany              @default(PENDIENTE)
  businessTutor            BusinessTutor[]
  idCareer                 Int
  career                   Career                     @relation(fields: [idCareer], references: [id])
  project                  Project[]
  agreement                Agreement[]
  idUser                   String                     @unique
  user                     User                       @relation(fields: [idUser], references: [dni])
  studentAssignedToCompany StudentAssignedToCompany[]
}

model Career {
  id                      Int             @id @default(autoincrement())
  code                    String          @unique
  name                    String
  dateStart               DateTime
  dateEnd                 DateTime
  timeRenovationAgreement Int
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  state                   Boolean         @default(true)
  coordinator             String          @unique
  viceCoordinator         String          @unique
  respStepDual            String          @unique
  academicTutor           AcademicTutor[]
  company                 Company[]
  student                 Student[]
}

model Student {
  id        Int           @default(autoincrement())
  idUser    String        @id @unique
  user      User          @relation(fields: [idUser], references: [dni])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  state     Boolean       @default(true)
  status    StatusStudent @default(APROBADO)
  idCareer  Int
  career    Career        @relation(fields: [idCareer], references: [id])
}

model Project {
  id                       Int                        @id @default(autoincrement())
  name                     String
  description              String
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  state                    Boolean                    @default(true)
  status                   StatusProject              @default(PENDIENTE)
  idAcademicTutor          Int
  idBusinessTutor          Int
  idCompany                Int
  company                  Company                    @relation(fields: [idCompany], references: [id])
  studentAssignedToCompany StudentAssignedToCompany[]
}

model StudentAssignedToCompany {
  id             Int      @default(autoincrement())
  idCompany      Int?
  company        Company? @relation(fields: [idCompany], references: [id])
  idStudent      String
  idProject      Int?
  project        Project? @relation(fields: [idProject], references: [id])
  electivePeriod String
  academicPeriod String
  parallel       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  state          Boolean  @default(true)

  @@id([idStudent])
}

model Agreement {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  dateStart DateTime
  dateEnd   DateTime
  documents String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  state     Boolean       @default(true)
  status    StatusProject @default(PENDIENTE)
  idCompany Int
  company   Company       @relation(fields: [idCompany], references: [id])
}

enum TypeDNI {
  CEDULA
  RUC
  PASAPORTE
}

enum StatusCompany {
  PENDIENTE
  APROBADA
  RECHAZADA
  RETIRADA
  ACTIVO
}

enum StatusStudent {
  ASIGNADO
  APROBADO
  RETIRADO
  REPROBADO
}

enum StatusProject {
  PENDIENTE
  ACTIVO
  INACTIVO
}
